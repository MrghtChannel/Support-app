import { PrismaClient } from "@prisma/client";
import { Markup } from "telegraf";
import { sendReportToDiscord } from "../../dsbot/modules/report.js";
import { generateUniqueId } from "../../../utils/idGenerator.js";

const prisma = new PrismaClient();

export async function handleCreateReportAction(ctx) {
  try {
    const existing = await prisma.report.findFirst({
      where: {
        userId: ctx.from.id.toString(),
        status: { in: ["OPEN", "IN_PROGRESS"] },
      },
    });

    if (existing) {
      return ctx.reply(
        `‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–ø–æ—Ä—Ç #${existing.id}. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.`
      );
    }

    await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤):");
    ctx.session.waitingForReport = true;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–ø–æ—Ä—Ç—É:", error);
    await ctx.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
}

export async function handleTextMessage(ctx) {
  try {
    const text = ctx.message.text;
    if (text.length > 500) {
      return ctx.reply("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤.");
    }

    if (ctx.session?.waitingForReport) {
      const report = await prisma.report.create({
        data: {
          id: generateUniqueId(),
          userId: ctx.from.id.toString(),
          username: ctx.from.username || "–ê–Ω–æ–Ω—ñ–º",
          question: text,
          status: "OPEN",
        },
      });
      await prisma.message.create({
        data: {
          reportId: report.id,
          sender: "user",
          content: text,
        },
      });

      await ctx.reply(
        `‚úÖ –í–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Ä–µ–ø–æ—Ä—Ç!\nID: ${report.id}\n\n–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ü–µ–π —Ä–µ–ø–æ—Ä—Ç, –∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–º–æ–∂–µ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏.`
      );

      await sendReportToDiscord(report);
      ctx.session.waitingForReport = false;
    } else {
      const report = await prisma.report.findFirst({
        where: {
          userId: ctx.from.id.toString(),
          status: { in: ["OPEN", "IN_PROGRESS"] },
        },
      });

      if (report) {
        const guild = global.discordClient.guilds.cache.first();
        if (!guild) return;

        const channel = guild.channels.cache.find(
          (ch) => ch.name === `report-${report.id}`
        );
        if (channel) {
          await channel.send(
            `üí¨ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${ctx.from.username || "–ê–Ω–æ–Ω—ñ–º"} (TG: ${ctx.from.id}):\n${text}`
          );
          await prisma.message.create({
            data: {
              reportId: report.id,
              sender: "user",
              content: text,
            },
          });

          await ctx.reply(`‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–µ–ø–æ—Ä—Ç—É #${report.id}.`);
        } else {
          await ctx.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –≤–∞—à–æ–≥–æ —Ä–µ–ø–æ—Ä—Ç—É.");
        }
      } else {
        await ctx.reply(
          "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–ø–æ—Ä—Ç—ñ–≤. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏.",
          Markup.inlineKeyboard([
            Markup.button.callback("üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ø–æ—Ä—Ç", "create_report"),
          ])
        );
      }
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
    await ctx.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
}