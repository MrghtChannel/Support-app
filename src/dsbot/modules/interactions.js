import { ActionRowBuilder, ButtonBuilder, ButtonStyle } from "discord.js";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export function handleInteractions(client, telegramBot) {
  client.on("interactionCreate", async (interaction) => {
    if (!interaction.isButton()) return;

    if (interaction.customId === "take_report") {
      try {
        const member = await interaction.guild.members.fetch(interaction.user.id);
        const isAdmin = member.roles.cache.has(process.env.DISCORD_ADMIN_ROLE);
        if (!isAdmin) {
          return interaction.reply({
            content: "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∑—è—Ç—Ç—è —Ä–µ–ø–æ—Ä—Ç—É.",
            ephemeral: true,
          });
        }

        const reportId = interaction.channel.name.split("-")[1];
        const report = await prisma.report.findUnique({ where: { id: reportId } });
        if (!report) {
          return interaction.reply({ content: "‚ùå –†–µ–ø–æ—Ä—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", ephemeral: true });
        }

        await prisma.report.update({
          where: { id: reportId },
          data: { status: "IN_PROGRESS", assignedTo: interaction.user.tag },
        });

        await interaction.channel.permissionOverwrites.create(interaction.user, {
          ViewChannel: true,
          SendMessages: true,
        });

        await telegramBot.telegram.sendMessage(
          report.userId,
          `üì¢ –í–∞—à —Ä–µ–ø–æ—Ä—Ç #${report.id} –≤–∑—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user.tag}.`
        );
        const closeButton = new ButtonBuilder()
          .setCustomId("close_report")
          .setLabel("–ó–∞–∫—Ä–∏—Ç–∏ —Ä–µ–ø–æ—Ä—Ç")
          .setStyle(ButtonStyle.Danger);

        const row = new ActionRowBuilder().addComponents(closeButton);

        await interaction.channel.send({
          content: `‚ÑπÔ∏è –ö–æ–ª–∏ —Ä–æ–±–æ—Ç–∞ –∑ —Ä–µ–ø–æ—Ä—Ç–æ–º #${report.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:`,
          components: [row],
        });

        await interaction.reply({
          content: `‚úÖ –í–∏ –≤–∑—è–ª–∏ —Ä–µ–ø–æ—Ä—Ç #${report.id}.`,
          ephemeral: true,
        });
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç—Ç—ñ —Ä–µ–ø–æ—Ä—Ç—É:", error);
        await interaction.reply({
          content: "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç—Ç—ñ —Ä–µ–ø–æ—Ä—Ç—É.",
          ephemeral: true,
        });
      }
    }
    if (interaction.customId === "close_report") {
      try {
        const reportId = interaction.channel.name.split("-")[1];
        const report = await prisma.report.findUnique({ where: { id: reportId } });
        if (!report) {
          return interaction.reply({ content: "‚ùå –†–µ–ø–æ—Ä—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", ephemeral: true });
        }
        const member = await interaction.guild.members.fetch(interaction.user.id);
        const isAdmin = member.roles.cache.has(process.env.DISCORD_ADMIN_ROLE);
        if (!isAdmin) {
          return interaction.reply({
            content: "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è —Ä–µ–ø–æ—Ä—Ç—É.",
            ephemeral: true,
          });
        }

        await prisma.report.update({
          where: { id: reportId },
          data: { status: "CLOSED" },
        });

        await telegramBot.telegram.sendMessage(
          report.userId,
          `‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç #${report.id} –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!`
        );

        await interaction.reply({
          content: `üõë –†–µ–ø–æ—Ä—Ç #${report.id} –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ.`,
        });

        setTimeout(() => {
          interaction.channel.delete().catch(() => {});
        }, 2000);
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Ä–µ–ø–æ—Ä—Ç—É:", error);
        await interaction.reply({
          content: "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Ä–µ–ø–æ—Ä—Ç—É.",
          ephemeral: true,
        });
      }
    }
  });
}
