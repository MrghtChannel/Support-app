import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export function handleCommands(client, telegramBot) {
  client.on("messageCreate", async (message) => {
    if (message.author.bot) return;
    if (message.content.startsWith("/–≤—ñ–¥–ø–æ–≤—ñ–¥—å")) {
      const args = message.content.split(" ");
      if (args.length < 3) {
        return message.reply("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /–≤—ñ–¥–ø–æ–≤—ñ–¥—å <id> <—Ç–µ–∫—Å—Ç>");
      }
      const reportId = args[1];
      const replyText = args.slice(2).join(" ");
      if (replyText.length > 500) {
        return message.reply("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤.");
      }

      try {
        const member = await message.guild.members.fetch(message.author.id);
        const isAdmin = member.roles.cache.has(process.env.DISCORD_ADMIN_ROLE);
        if (!isAdmin) {
          return message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.");
        }

        const report = await prisma.report.findUnique({
          where: { id: reportId },
        });

        if (!report) {
          return message.reply("‚ùå –†–µ–ø–æ—Ä—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }

        if (report.status !== "IN_PROGRESS" || !report.assignedTo) {
          return message.reply("‚ö†Ô∏è –¶–µ–π —Ä–µ–ø–æ—Ä—Ç —â–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≤–∑—è–≤. –°–ø–æ—á–∞—Ç–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É '–í–∑—è—Ç–∏ —Ä–µ–ø–æ—Ä—Ç'.");
        }

        await telegramBot.telegram.sendMessage(
          report.userId,
          `üì¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à —Ä–µ–ø–æ—Ä—Ç #${report.id}:\n${replyText}`
        );

        await prisma.message.create({
          data: {
            reportId: report.id,
            sender: "admin",
            content: replyText,
          },
        });

        await message.channel.send(`‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç—É #${report.id}`);
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", error);
        await message.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.");
      }
    }
    if (message.content.startsWith("/–ø–µ—Ä–µ–≥–ª—è–¥")) {
      const args = message.content.split(" ");
      if (args.length < 2) {
        return message.reply("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /–ø–µ—Ä–µ–≥–ª—è–¥ <id>");
      }

      const reportId = args[1];

      try {
        const member = await message.guild.members.fetch(message.author.id);
        const isHeadAdmin = member.roles.cache.has(process.env.DISCORD_HEADADMIN_ROLE);

        if (!isHeadAdmin) {
          return message.reply("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –≥–æ–ª–æ–≤–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.");
        }
        const report = await prisma.report.findUnique({
          where: { id: reportId },
          include: { messages: { orderBy: { createdAt: "asc" } } }, 
        });

        if (!report) {
          return message.reply("‚ùå –†–µ–ø–æ—Ä—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
        let conversation = `üìú **–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç—É #${reportId}**\n`;
        conversation += `üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${report.username} (TG: ${report.userId})\n`;
        conversation += `‚ùì –ü–∏—Ç–∞–Ω–Ω—è: ${report.question.substring(0, 500)}\n`;
        conversation += `üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${new Date(report.createdAt).toLocaleString()}\n\n`;

        if (!report.messages.length) {
          conversation += `‚ö†Ô∏è –î–ª—è —Ä–µ–ø–æ—Ä—Ç—É #${reportId} –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.`;
        } else {
          conversation += `**–ü–µ—Ä–µ–ø–∏—Å–∫–∞:**\n`;
          for (const msg of report.messages) {
            const sender = msg.sender === "admin" ? "üõ°Ô∏è –ê–¥–º—ñ–Ω" : "üë§ –ì—Ä–∞–≤–µ—Ü—å";
            conversation += `${sender} (${new Date(msg.createdAt).toLocaleString()}):\n${msg.content}\n\n`;
          }
        }

        const maxMessageLength = 2000;
        if (conversation.length <= maxMessageLength) {
          await message.channel.send({ content: conversation });
        } else {
          const messagesToSend = [];
          let currentMessage = "";
          const lines = conversation.split("\n");

          for (const line of lines) {
            if (currentMessage.length + line.length + 1 > maxMessageLength) {
              messagesToSend.push(currentMessage);
              currentMessage = line + "\n";
            } else {
              currentMessage += line + "\n";
            }
          }
          if (currentMessage) messagesToSend.push(currentMessage);

          for (const msg of messagesToSend) {
            await message.channel.send({ content: msg });
          }
        }

        await message.reply(`‚úÖ –ü–µ—Ä–µ–ø–∏—Å–∫—É –¥–ª—è —Ä–µ–ø–æ—Ä—Ç—É #${reportId} –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ.`);
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ —Ä–µ–ø–æ—Ä—Ç—É:", error);
        await message.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Ä–µ–ø–æ—Ä—Ç—É.");
      }
    }
  });
}